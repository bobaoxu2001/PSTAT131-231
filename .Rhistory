step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
#pokemon_grid
library(glmnet)
library(compiler)
tune_res <- tune_grid(
object = pokemon_workflow,
resamples = v_fold,
grid = pokemon_grid
)
autoplot(tune_res)
best_roc_auc <- select_best(tune_res,metric = "roc_auc")
pokemon_final <- finalize_workflow(pokemon_workflow,best_roc_auc)
pokemon_final_fit <- fit(pokemon_final,data=pokemon_train)
augment(pokemon_final_fit, new_data = pokemon_test) %>%
accuracy(truth = type_1, estimate = .pred_class)
install.packages(boot)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
hist(shot_boot$t,freq = F)
lines(density(shot_boot$t), col="red")
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
pokemon_grid
Conf_Interval$normal
#install.packages(boot)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
BootMean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
ShotBoot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(ShotBoot,conf = 0.99)
hist(ShotBoot$t,freq = F)
lines(density(ShotBoot$t), col="red")
#install.packages(boot)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
BootMean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
ShotBoot <- boot(shot,BootMean,R=1000)
Conf_Interval <- boot.ci(ShotBoot,conf = 0.99)
hist(ShotBoot$t,freq = F)
lines(density(ShotBoot$t), col="red")
#install.packages(boot)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
BootMean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
ShotBoot <- boot(shot,BootMean,R=1000)
Conf_Interval <- boot.ci(ShotBoot,conf = 0.99)
hist(ShotBoot$t,freq = F)
lines(density(ShotBoot$t), col="red")
Conf_Interval$normal
#install.packages(boot)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
BootMean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
ShotBoot <- boot(shot,BootMean,R=1000)
Conf_Interval <- boot.ci(ShotBoot,conf = 0.99)
hist(ShotBoot$t,freq = F)
lines(density(ShotBoot$t), col="red")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(rpart.plot)
install.packages(rpart.plot)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(rpart.plot)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(vip)
install.packages(vip)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(vip)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(janitor)
library(randomForest)
library(xgboost)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(rpart.plot)
library(vip)
library(janitor)
library(randomForest)
library(xgboost)
library(ggplot2)
library(corrr)
pokemon<-read.csv('Pokemon.csv')
pokemon<-read.csv("/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-6/data/Pokemon.csv")
pokemon<-clean_names(pokemon)
pokemon<-pokemon %>%
filter(type_1 %in% c("Bug","Fire","Grass","Normal","Water","Psychic"))
pokemon$type_1<-factor(pokemon$type_1)
pokemon$legendary<-factor(pokemon$legendary)
pokemon_split <- initial_split(pokemon, prop = 0.80,strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
pokemon_folds <- vfold_cv(pokemon_train, v = 5, strata=type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk +
attack + speed + defense+hp+sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon<-read.csv("/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-6/data/Pokemon.csv")
pokemon<-clean_names(pokemon)
pokemon<-pokemon %>%
filter(type_1 %in% c("Bug","Fire","Grass","Normal","Water","Psychic"))
pokemon$type_1<-factor(pokemon$type_1)
pokemon$legendary<-factor(pokemon$legendary)
pokemon_split <- initial_split(pokemon, prop = 0.80,strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
pokemon_folds <- vfold_cv(pokemon_train, v = 5, strata=type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk +
attack + speed + defense+hp+sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon<-read.csv("/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-6/data/Pokemon.csv")
pokemon<-clean_names(pokemon)
pokemon<-pokemon %>%
filter(type_1 %in% c("Bug","Fire","Grass","Normal","Water","Psychic"))
pokemon$type_1<-factor(pokemon$type_1)
pokemon$legendary<-factor(pokemon$legendary)
pokemon_split <- initial_split(pokemon, prop = 0.80, strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
pokemon_folds <- vfold_cv(pokemon_train, v = 5, strata=type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk + attack + speed + defense + hp + sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
cor_pokemon_train <- pokemon_train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
rplot(cor_pokemon_train)
library(corrplot)
cor_pokemon_train <- pokemon_train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
rplot(cor_pokemon_train)
library(corrplot)
cor_pokemon_train <- pokemon_train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
corrplot.mixed(cor_pokemon_train)
library(corrplot)
cor_pokemon_train <- pokemon_train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
corrplot(cor_pokemon_train)
library(corrplot)
cor_pokemon_train <- pokemon_train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
corrplot.mixed(cor_pokemon_train)
tree_spec<-decision_tree() %>%
set_engine("rpart")
class_tree_spec<-tree_spec %>%
set_mode("classification")
tree_workflow<-workflow() %>%
add_model(class_tree_spec %>% set_args(cost_complexity=tune())) %>%
add_recipe(pokemon_recipe)
set.seed(1202)
pokemon_folds<-vfold_cv(pokemon_train)
param_grid<-grid_regular(cost_complexity(range = c(-3, -1)),levels=10)
tune_res<-tune_grid(
tree_workflow,
resamples=pokemon_folds,
grid=param_grid,
metrics=metric_set(roc_auc)
)
autoplot(tune_res)
tree_spec<-decision_tree() %>%
set_engine("rpart")
class_tree_spec<-tree_spec %>%
set_mode("classification")
tree_workflow<-workflow() %>%
add_model(class_tree_spec %>% set_args(cost_complexity=tune())) %>%
add_recipe(pokemon_recipe)
set.seed(1202)
pokemon_folds<-vfold_cv(pokemon_train)
param_grid<-grid_regular(cost_complexity(range = c(-3, -1)),levels=10)
tune_res<-tune_grid(
tree_workflow,
resamples=pokemon_folds,
grid=param_grid,
metrics=metric_set(roc_auc)
)
autoplot(tune_res)
tree_spec<-decision_tree() %>%
set_engine("rpart")
class_tree_spec<-tree_spec %>%
set_mode("classification")
tree_workflow<-workflow() %>%
add_model(class_tree_spec %>% set_args(cost_complexity=tune())) %>%
add_recipe(pokemon_recipe)
set.seed(2888)
pokemon_folds<-vfold_cv(pokemon_train)
param_grid<-grid_regular(cost_complexity(range = c(-3, -1)),levels=10)
tune_res<-tune_grid(
tree_workflow,
resamples=pokemon_folds,
grid=param_grid,
metrics=metric_set(roc_auc)
)
autoplot(tune_res)
collect_metrics(tune_res)
arrange(tune_res)
best_complexity <- select_best(tune_res)
best_complexity
collect_metrics(tune_res)
arrange(tune_res)
best <- select_best(tune_res)
best
class_tree_final<-finalize_workflow(tree_workflow,best_complexity)
class_tree_final_fit<-fit(class_tree_final,data=pokemon_train)
class_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
collect_metrics(tune_res)
arrange(tune_res)
best <- select_best(tune_res)
best
class_tree_final <- finalize_workflow(tree_workflow,best_complexity)
class_tree_final_fit<-fit(class_tree_final,data=pokemon_train)
class_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
class_forest_spec<-rand_forest() %>%
set_engine("ranger",importance="impurity") %>%
set_mode("classification")
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)),  levels = 8)
forest_workflow<-workflow() %>%
add_model(class_forest_spec %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
class_forest_spec<-rand_forest() %>%
set_engine("ranger",importance="impurity") %>%
set_mode("classification")
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)),  levels = 8)
forest_workflow<-workflow() %>%
add_model(class_forest_spec %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
class_forest_spec <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification")
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)),  levels = 8)
forest_workflow <- workflow() %>%
add_model(class_forest_spec %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
class_forest_spec <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification")
forest_workflow <- workflow() %>%
add_model(class_forest_spec %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)),  levels = 8)
cforest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification")
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification")
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
param_grid2
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
#forest
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
#param_grid2
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
forest_workflow
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
param_grid2
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
#forest_workflow
param_grid2<-grid_regular(mtry(range = c(1, 8)), trees(range = c(1,8)),
min_n(range = c(1,8)), levels = 8)
param_grid2
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
#forest_workflow
param_grid2<-grid_regular(mtry(range = c(1, 8)),
trees(range = c(1,8)),
min_n(range = c(1,8)),
levels = 8)
param_grid2
install.packages("ranger")
tune_res_forest<-tune_grid(
forest_workflow,
resamples = pokemon_folds,
grid = param_grid2,
metrics = metric_set(roc_auc)
)
autoplot(tune_res_forest)
#install.packages("ranger")
tune_res_forest<-tune_grid(
forest_workflow,
resamples = pokemon_folds,
grid = param_grid2,
metrics = metric_set(roc_auc)
)
autoplot(tune_res_forest)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
collect_metrics(tune_res_forest)
class_tree_final <- finalize_workflow(tree_workflow,best_complexity)
library(tidyverse)
library(tidymodels)
library(ISLR)
library(vip)
library(janitor)
library(randomForest)
library(xgboost)
library(ggplot2)
library(corrr)
pokemon<-read.csv("/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-6/data/Pokemon.csv")
pokemon<-clean_names(pokemon)
pokemon<-pokemon %>%
filter(type_1 %in% c("Bug","Fire","Grass","Normal","Water","Psychic"))
pokemon$type_1<-factor(pokemon$type_1)
pokemon$legendary<-factor(pokemon$legendary)
pokemon_split <- initial_split(pokemon, prop = 0.80, strata = type_1)
pokemon_train <- training(pokemon_split)
pokemon_test <- testing(pokemon_split)
pokemon_folds <- vfold_cv(pokemon_train, v = 5, strata=type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk + attack + speed + defense + hp + sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
library(corrplot)
cor_pokemon_train <- pokemon_train %>%
select(where(is.numeric)) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
corrplot.mixed(cor_pokemon_train)
tree_spec<-decision_tree() %>%
set_engine("rpart")
class_tree_spec<-tree_spec %>%
set_mode("classification")
tree_workflow<-workflow() %>%
add_model(class_tree_spec %>% set_args(cost_complexity=tune())) %>%
add_recipe(pokemon_recipe)
set.seed(2888)
pokemon_folds <- vfold_cv(pokemon_train)
param_grid <- grid_regular(cost_complexity(range = c(-3, -1)),levels=10)
tune_res <- tune_grid(
tree_workflow,
resamples=pokemon_folds,
grid=param_grid,
metrics=metric_set(roc_auc)
)
autoplot(tune_res)
collect_metrics(tune_res)
arrange(tune_res)
best <- select_best(tune_res)
best
class_tree_final <- finalize_workflow(tree_workflow,best_complexity)
class_tree_final <- finalize_workflow(tree_workflow,best)
class_tree_final_fit<-fit(class_tree_final,data=pokemon_train)
class_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
library(rpart.plot)
class_tree_final <- finalize_workflow(tree_workflow,best)
class_tree_final_fit<-fit(class_tree_final,data=pokemon_train)
class_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
forest <- rand_forest() %>%
set_engine("ranger", importance="impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(),trees = tune(), min_n = tune())
forest
forest_workflow <- workflow() %>%
add_model(forest %>% set_args(mtry = tune(), trees = tune(),
min_n = tune())) %>%
add_recipe(pokemon_recipe)
#forest_workflow
param_grid2<-grid_regular(mtry(range = c(1, 8)),
trees(range = c(1,8)),
min_n(range = c(1,8)),
levels = 8)
param_grid2
#install.packages("ranger")
tune_res_forest<-tune_grid(
forest_workflow,
resamples = pokemon_folds,
grid = param_grid2,
metrics = metric_set(roc_auc)
)
