shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=1000)
Confidence_Interval <- boot.ci(Shotboot,conf = 0.99)
library(boot)
set.seed(685)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=1000)
Confidence_Interval <- boot.ci(Shotboot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(685)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=1000)
library(boot)
set.seed(325)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=1000)
#install.packages("janitor")
library("janitor")
pokemon<-read.csv('/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-5/data/Pokemon.csv')
pokemon_clean<-clean_names(pokemon)
#pokemon_clean
#install.packages("janitor")
library("janitor")
pokemon<-read.csv('/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-5/data/Pokemon.csv')
pokemon_clean <- clean_names(pokemon)
pokemon_clean
library(ggplot2)
library(tidymodels)
pokemon_clean %>%
ggplot()+
geom_bar(aes(type_1))
pokemon_clean2 <- filter(pokemon_clean,type_1 %in% c("Bug", "Fire", "Grass", "Normal", "Water", "Psychic")) %>%
mutate(type_1 = factor(type_1),legendary = factor(legendary),generation = factor(generation))
#pokemon_clean2
set.seed(3185)
pokemon_clean2_split <- initial_split(pokemon_clean2, strata = type_1, prop=0.8)
pokemon_train <- training(pokemon_clean2_split)
pokemon_test <- testing(pokemon_clean2_split)
v_fold <- vfold_cv(pokemon_train, v=5,strata = type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk +
attack + speed + defense+hp+sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
pokemon_grid
library(glmnet)
library(compiler)
tune_res <- tune_grid(
object = pokemon_workflow,
resamples = v_fold,
grid = pokemon_grid
)
autoplot(tune_res)
best_roc_auc <- select_best(tune_res,metric = "roc_auc")
pokemon_final <- finalize_workflow(pokemon_workflow,best_roc_auc)
pokemon_final_fit <- fit(pokemon_final,data=pokemon_train)
augment(pokemon_final_fit, new_data = pokemon_test) %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon_final_fit,new_data=pokemon_test)%>%
roc_auc(type_1,.pred_Bug,.pred_Fire,.pred_Grass,.pred_Normal,.pred_Water,.pred_Psychic)
augment(pokemon_final_fit,new_data=pokemon_test)%>%
roc_curve(type_1,.pred_Bug,.pred_Fire,.pred_Grass,.pred_Normal,.pred_Water,.pred_Psychic)%>%
autoplot()
augment(pokemon_final_fit,new_data=pokemon_test)%>%conf_mat(
truth=type_1,.pred_class)%>%
autoplot(type="heatmap")
library(boot)
set.seed(325)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=1000)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
mean
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
mean
#shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
mean
#shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
mean
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
Confidence_Interval <- boot.ci(shot_boot,conf = 0.99)
Conf_Interval$normal
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
shot
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(365)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(250)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(250)
shot <- c(rep(1,337),rep(0,464))
messi <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
library(boot)
set.seed(250)
shot <- c(rep(1,337),rep(0,464))
messi <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,messi,R=1000)
#install.packages("janitor")
library("janitor")
pokemon<-read.csv('/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-5/data/Pokemon.csv')
pokemon_clean <- clean_names(pokemon)
#pokemon_clean
library(ggplot2)
library(tidymodels)
pokemon_clean %>%
ggplot()+
geom_bar(aes(type_1))
pokemon_clean2 <- filter(pokemon_clean,type_1 %in% c("Bug", "Fire", "Grass", "Normal", "Water", "Psychic")) %>%
mutate(type_1 = factor(type_1),legendary = factor(legendary),generation = factor(generation))
#pokemon_clean2
set.seed(3185)
pokemon_clean2_split <- initial_split(pokemon_clean2, strata = type_1, prop=0.8)
pokemon_train <- training(pokemon_clean2_split)
pokemon_test <- testing(pokemon_clean2_split)
v_fold <- vfold_cv(pokemon_train, v=5,strata = type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk +
attack + speed + defense+hp+sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
pokemon_grid
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
pokemon_grid
library(glmnet)
library(compiler)
tune_res <- tune_grid(
object = pokemon_workflow,
resamples = v_fold,
grid = pokemon_grid
)
autoplot(tune_res)
library(glmnet)
library(compiler)
tune_res <- tune_grid(
object = pokemon_workflow,
resamples = v_fold,
grid = pokemon_grid
)
best_roc_auc <- select_best(tune_res,metric = "roc_auc")
pokemon_final <- finalize_workflow(pokemon_workflow,best_roc_auc)
pokemon_final_fit <- fit(pokemon_final,data=pokemon_train)
augment(pokemon_final_fit, new_data = pokemon_test) %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon_final_fit,new_data=pokemon_test)%>%
roc_auc(type_1,.pred_Bug,.pred_Fire,.pred_Grass,.pred_Normal,.pred_Water,.pred_Psychic)
augment(pokemon_final_fit,new_data=pokemon_test)%>%
roc_curve(type_1,.pred_Bug,.pred_Fire,.pred_Grass,.pred_Normal,.pred_Water,.pred_Psychic)%>%
autoplot()
augment(pokemon_final_fit,new_data=pokemon_test)%>%conf_mat(
truth=type_1,.pred_class)%>%
autoplot(type="heatmap")
augment(pokemon_final_fit,new_data=pokemon_test)%>%conf_mat(
truth=type_1,.pred_class)%>%
autoplot(type="heatmap")
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
install.packages("janitor")
library("janitor")
pokemon<-read.csv('/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-5/data/Pokemon.csv')
pokemon_clean <- clean_names(pokemon)
pokemon_clean
install.packages("janitor")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
install.packages("janitor")
library("janitor")
pokemon<-read.csv('/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-5/data/Pokemon.csv')
pokemon_clean <- clean_names(pokemon)
#pokemon_clean
library(ggplot2)
library(tidymodels)
pokemon_clean %>%
ggplot()+
geom_bar(aes(type_1))
pokemon_clean2 <- filter(pokemon_clean,type_1 %in% c("Bug", "Fire", "Grass", "Normal", "Water", "Psychic")) %>%
mutate(type_1 = factor(type_1),legendary = factor(legendary),generation = factor(generation))
#pokemon_clean2
set.seed(3185)
pokemon_clean2_split <- initial_split(pokemon_clean2, strata = type_1, prop=0.8)
pokemon_train <- training(pokemon_clean2_split)
pokemon_test <- testing(pokemon_clean2_split)
v_fold <- vfold_cv(pokemon_train, v=5,strata = type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk +
attack + speed + defense+hp+sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
pokemon_grid
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
pokemon_grid
library(glmnet)
library(compiler)
tune_res <- tune_grid(
object = pokemon_workflow,
resamples = v_fold,
grid = pokemon_grid
)
best_roc_auc <- select_best(tune_res,metric = "roc_auc")
pokemon_final <- finalize_workflow(pokemon_workflow,best_roc_auc)
pokemon_final_fit <- fit(pokemon_final,data=pokemon_train)
augment(pokemon_final_fit, new_data = pokemon_test) %>%
accuracy(truth = type_1, estimate = .pred_class)
augment(pokemon_final_fit,new_data=pokemon_test)%>%
roc_auc(type_1,.pred_Bug,.pred_Fire,.pred_Grass,.pred_Normal,.pred_Water,.pred_Psychic)
augment(pokemon_final_fit,new_data=pokemon_test)%>%
roc_curve(type_1,.pred_Bug,.pred_Fire,.pred_Grass,.pred_Normal,.pred_Water,.pred_Psychic)%>%
autoplot()
augment(pokemon_final_fit,new_data=pokemon_test)%>%conf_mat(
truth=type_1,.pred_class)%>%
autoplot(type="heatmap")
library(boot)
set.seed(250)
shot <- c(rep(1,337),rep(0,464))
messi <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,messi,R=1000)
#install.packages("janitor")
library("janitor")
pokemon<-read.csv('/Users/xuao/Documents/2022Fall/Pstat131/PSTAT231/homework-5/data/Pokemon.csv')
pokemon_clean <- clean_names(pokemon)
#pokemon_clean
library(ggplot2)
library(tidymodels)
pokemon_clean %>%
ggplot()+
geom_bar(aes(type_1))
pokemon_clean2 <- filter(pokemon_clean,type_1 %in% c("Bug", "Fire", "Grass", "Normal", "Water", "Psychic")) %>%
mutate(type_1 = factor(type_1),legendary = factor(legendary),generation = factor(generation))
#pokemon_clean2
set.seed(3185)
pokemon_clean2_split <- initial_split(pokemon_clean2, strata = type_1, prop=0.8)
pokemon_train <- training(pokemon_clean2_split)
pokemon_test <- testing(pokemon_clean2_split)
v_fold <- vfold_cv(pokemon_train, v=5,strata = type_1)
pokemon_recipe <- recipe(type_1 ~ legendary + generation + sp_atk +
attack + speed + defense+hp+sp_def,
data = pokemon_train) %>%
step_dummy(legendary,generation) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
pokemon_spec <-
multinom_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
pokemon_workflow <- workflow() %>%
add_recipe(pokemon_recipe) %>%
add_model(pokemon_spec)
pokemon_grid <- grid_regular(penalty(range = c(-5, 5)), mixture(range=c(0,1)),
levels = 10)
#pokemon_grid
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
#boot_mean <- function(original_vector, resample_vector) {
#mean(original_vector[resample_vector])
#}
#shot_boot <- boot(shot,boot_mean,R=1000)
#Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
#hist(shot_boot$t,freq = F)
#lines(density(shot_boot$t), col="red")
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=800)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=800)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,mean,R=800)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=800)
library(boot)
set.seed(12)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=800)
library(boot)
set.seed(12)
shot <- c(rep(1,337),rep(0,464))
mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
Shotboot <- boot(shot,mean,R=800)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
install.packages(boot)
library(boot)
set.seed(333)
shot <- c(rep(1,337),rep(0,464))
boot_mean <- function(original_vector, resample_vector) {
mean(original_vector[resample_vector])
}
shot_boot <- boot(shot,boot_mean,R=1000)
Conf_Interval <- boot.ci(shot_boot,conf = 0.99)
