lda_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(smarket_recipe)
lda_fit <- fit(lda_wkflow, smarket_train)
predict(lda_fit, new_data = smarket_train, type = "prob")
augment(lda_fit, new_data = smarket_train) %>%
conf_mat(truth = Direction, estimate = .pred_class)
lda_acc <- augment(lda_fit, new_data = smarket_train) %>%
accuracy(truth = Direction, estimate = .pred_class)
lda_acc
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(smarket_recipe)
qda_fit <- fit(qda_wkflow, smarket_train)
predict(qda_fit, new_data = smarket_train, type = "prob")
augment(qda_fit, new_data = smarket_train) %>%
conf_mat(truth = Direction, estimate = .pred_class)
qda_acc <- augment(qda_fit, new_data = smarket_train) %>%
accuracy(truth = Direction, estimate = .pred_class)
qda_acc
nb_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wkflow <- workflow() %>%
add_model(nb_mod) %>%
add_recipe(smarket_recipe)
nb_fit <- fit(nb_wkflow, smarket_train)
predict(nb_fit, new_data = smarket_train, type = "prob")
augment(nb_fit, new_data = smarket_train) %>%
conf_mat(truth = Direction, estimate = .pred_class)
nb_acc <- augment(nb_fit, new_data = smarket_train) %>%
accuracy(truth = Direction, estimate = .pred_class)
nb_acc
accuracies <- c(log_reg_acc$.estimate, lda_acc$.estimate,
nb_acc$.estimate, qda_acc$.estimate)
models <- c("Logistic Regression", "LDA", "Naive Bayes", "QDA")
results <- tibble(accuracies = accuracies, models = models)
results %>%
arrange(-accuracies)
predict(nb_fit, new_data = smarket_test, type = "prob")
augment(nb_fit, new_data = smarket_test) %>%
conf_mat(truth = Direction, estimate = .pred_class)
multi_metric <- metric_set(accuracy, sensitivity, specificity)
augment(nb_fit, new_data = smarket_test) %>%
multi_metric(truth = Direction, estimate = .pred_class)
augment(nb_fit, new_data = smarket_test) %>%
roc_curve(Direction, .pred_Down) %>%
autoplot()
set.seed(3435)
smarket_split <- initial_split(Smarket, prop = 0.70,
strata = Direction)
smarket_train <- training(smarket_split)
smarket_test <- testing(smarket_split)
smarket_recipe <- recipe(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 +
Lag5 + Volume, data = smarket_train)
multi_metric <- metric_set(accuracy, sensitivity, specificity)
augment(nb_fit, new_data = smarket_test) %>%
multi_metric(truth = Direction, estimate = .pred_class)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
abalone <- read_csv("abalone.csv")
head(abalone)
abalone["age"] <- abalone["rings"]+1.5
ggplot(abalone,aes(x=age))+geom_histogram(bins=30)
set.seed(1202)
abalone_split<-initial_split(abalone,prop=0.80,
strata = age )
abalone_train<-training(abalone_split)
abalone_test<-testing(abalone_split)
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
abalone_mod
lm_model<-linear_reg() %>%
set_engine("lm")
lm_wflow<-workflow() %>%
add_model(lm_model) %>%
add_recipe(abalone_recipe)
lm_wflow<-workflow() %>%
add_model(lm_model) %>%
add_recipe(abalone_recipe)
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age<-data.frame(type="F",longest_shell=0.50,diameter=0.10,height
=0.30, whole_weight=4,shucked_weight=1,
viscera_weight=2,shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
lm_fit %>%
extract_fit_parsnip() %>%
tidy()
library(yardstick)
abalone_train_res <- predict(lm_fit, new_data = abalone_training %>% select(-age))
abalone_train_res <- bind_cols(abalone_train_res, abalone_training %>% select(age))
abalone_train_res %>%
head()
abalone_train_res %>%
ggplot(aes(x= .pred, y=age))+
geom_point(alpha=0.2)+
geom_abline(lty=2)+
theme_bw()+
coord_obs_pred()
abalone_metrics<-metric_set(rmse,rsq,mae)
abalone_metrics(abalone_train_res, truth=age,
estimate=.pred)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
abalone <- read_csv("abalone.csv")
head(abalone)
set.seed(3000)
abalone_split<-initial_split(abalone,prop=0.80,
strata = age )
library(tidyverse)
library(tidymodels)
abalone <- read_csv("abalone.csv")
head(abalone)
abalone["age"] <- abalone["rings"]+1.5
ggplot(abalone,aes(x=age))+geom_histogram(bins=30)
set.seed(3000)
abalone_split<-initial_split(abalone,prop=0.80,
strata = age )
abalone_train<-training(abalone_split)
abalone_test<-testing(abalone_split)
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
abalone_mod
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
abalone_mod
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
abalone_mod
abalone_recipe <- recipe(age~., data = abalone_training) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms = ~ shucked_weight:starts_with('type')+
diameter:longest_shell+
shell_weight:shucked_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
summary(abalone_recipe)
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
summary(abalone_recipe)
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
summary(abalone_recipe)
lm_model<-linear_reg() %>%
set_engine("lm")
lm_wflow<-workflow() %>%
add_model(lm_model) %>%
add_recipe(abalone_recipe)
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age<-data.frame(type="F",longest_shell=0.50,diameter=0.10,height
=0.30, whole_weight=4,shucked_weight=1,
viscera_weight=2,shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
lm_fit %>%
extract_fit_parsnip() %>%
tidy()
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age<-data.frame(type="F",longest_shell=0.50,diameter=0.10,height
=0.30, whole_weight=4,shucked_weight=1,
viscera_weight=2,shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
lm_fit %>%
extract_fit_parsnip() %>%
tidy()
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age<-data.frame(type="F",longest_shell=0.50,diameter=0.10,height
=0.30, whole_weight=4,shucked_weight=1,
viscera_weight=2,shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
lm_fit %>%
extract_fit_parsnip() %>%
tidy()
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age <- data.frame(type="F",longest_shell=0.50,diameter=0.10,height
=0.30, whole_weight=4,shucked_weight=1,
viscera_weight=2,shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
lm_fit %>%
extract_fit_parsnip() %>%
tidy()
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age <- data.frame(type="F",
longest_shell=0.50,
diameter=0.10,
height=0.30,
whole_weight=4,
shucked_weight=1,
viscera_weight=2,
shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age <- data.frame(type="F",
longest_shell=0.50,
diameter=0.10,
height=0.30,
whole_weight=4,
shucked_weight=1,
viscera_weight=2,
shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
library(yardstick)
abalone_train_res <- predict(lm_fit, new_data = abalone_training %>% select(-age))
abalone_train_res <- bind_cols(abalone_train_res, abalone_training %>% select(age))
abalone_train_res %>%
head()
abalone_train_res %>%
ggplot(aes(x= .pred, y=age))+
geom_point(alpha=0.2)+
geom_abline(lty=2)+
theme_bw()+
coord_obs_pred()
abalone_metrics<-metric_set(rmse,rsq,mae)
abalone_metrics(abalone_train_res, truth=age,
estimate=.pred)
library(yardstick)
abalone_train_res <- predict(lm_fit, new_data = abalone_training %>% select(-age))
abalone_train_res <- bind_cols(abalone_train_res, abalone_training %>% select(age))
abalone_train_res %>%
head()
abalone_metrics<-metric_set(rmse,rsq,mae)
abalone_metrics(abalone_train_res, truth=age,
estimate=.pred)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
abalone <- read_csv("abalone.csv")
head(abalone)
abalone["age"] <- abalone["rings"]+1.5
ggplot(abalone,aes(x=age))+geom_histogram(bins=30)
set.seed(3000)
abalone_split <- initial_split(abalone,prop=0.80,
strata = age )
abalone_train <- training(abalone_split)
abalone_test <- testing(abalone_split)
abalone_training<- abalone_train %>% select(-rings)
abalone_recipe<-recipe(age ~ ., data=abalone_training) %>%
step_dummy(all_nominal_predictors())
abalone_mod<-abalone_recipe %>%
step_interact(terms= ~ starts_with("type"):shucked_weight+
longest_shell:diameter+
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
summary(abalone_recipe)
lm_model<-linear_reg() %>%
set_engine("lm")
lm_wflow<-workflow() %>%
add_model(lm_model) %>%
add_recipe(abalone_recipe)
lm_fit<-fit(lm_wflow,abalone_training)
female_abalone_age <- data.frame(type="F",
longest_shell=0.50,
diameter=0.10,
height=0.30,
whole_weight=4,
shucked_weight=1,
viscera_weight=2,
shell_weight=1)
predict(lm_fit,new_data=female_abalone_age)
library(yardstick)
abalone_train_res <- predict(lm_fit, new_data = abalone_training %>% select(-age))
abalone_train_res <- bind_cols(abalone_train_res, abalone_training %>% select(age))
abalone_train_res %>%
head()
abalone_metrics<-metric_set(rmse,rsq,mae)
abalone_metrics(abalone_train_res, truth=age,
estimate=.pred)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
titanic <- read.csv("titanic.csv")
head(titanic)
titanic$survived<-factor(titanic$survived, levels=c('Yes','No'))
titanic$pclass<-factor(titanic$pclass)
set.seed(1202)
titanic_split<-initial_split(titanic,prop=0.80,
strata = survived )
library(ggplot2)
library(tidymodels)
library(ISLR)
library(ISLR2)
library(discrim)
library(poissonreg)
library(corrr)
library(klaR)
tidymodels_prefer()
titanic <- read.csv("titanic.csv")
head(titanic)
titanic$survived<-factor(titanic$survived, levels=c('Yes','No'))
titanic$pclass<-factor(titanic$pclass)
set.seed(1202)
titanic_split<-initial_split(titanic,prop=0.80,
strata = survived )
titanic_train<-training(titanic_split)
titanic_test<-testing(titanic_split)
set.seed(1202)
titanic_split<-initial_split(titanic,prop=0.80,
strata = survived )
titanic_train<-training(titanic_split)
titanic_test<-testing(titanic_split)
titanic_train
titanic_test
ggplot(titanic_train,aes(x=survived))+geom_bar()
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
rplot(cor_titanic)
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
plot(cor_titanic)
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
ggplot(cor_titanic)
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
plot(cor_titanic)
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp +
parch + fare, data = titanic_train) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms= ~ starts_with("sex"):fare+
age:fare)
titanic_recipe
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
lda_mod <- discrim_linear() %>%
set_mode("classification") %>%
set_engine("MASS")
lda_wkflow <- workflow() %>%
add_model(lda_mod) %>%
add_recipe(titanic_recipe)
lda_fit <- fit(lda_wkflow, titanic_train)
qda_mod <- discrim_quad() %>%
set_mode("classification") %>%
set_engine("MASS")
qda_wkflow <- workflow() %>%
add_model(qda_mod) %>%
add_recipe(titanic_recipe)
qda_fit <- fit(qda_wkflow, titanic_train)
nb_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wkflow <- workflow() %>%
add_model(nb_mod) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wkflow, titanic_train)
nb_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
nb_wkflow <- workflow() %>%
add_model(nb_mod) %>%
add_recipe(titanic_recipe)
nb_fit <- fit(nb_wkflow, titanic_train)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
bind_titanic_train=bind_cols(predict(log_fit,new_data=titanic_train,type="class"),
predict(lda_fit,new_data=titanic_train,type="class"),
predict(qda_fit,new_data=titanic_train,type="class"),
predict(nb_fit,new_data=titanic_train,type="class"),
titanic_train$survived)
bind_titanic_train=bind_cols(predict(log_fit,new_data=titanic_train,type="class"),
predict(lda_fit,new_data=titanic_train,type="class"),
predict(qda_fit,new_data=titanic_train,type="class"),
predict(nb_fit,new_data=titanic_train,type="class"),
titanic_train$survived)
log_reg_acc <- augment(log_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
log_reg_acc
lda_acc <- augment(lda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
lda_acc
qda_acc <- augment(qda_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
qda_acc
nb_acc <- augment(nb_fit, new_data = titanic_train) %>%
accuracy(truth = survived, estimate = .pred_class)
nb_acc
accuracies <- c(log_reg_acc$.estimate, lda_acc$.estimate,
nb_acc$.estimate, qda_acc$.estimate)
models <- c("Logistic Regression", "LDA", "Naive Bayes", "QDA")
results <- tibble(accuracies = accuracies, models = models)
results %>%
arrange(-accuracies)
predict(log_fit, new_data = titanic_test, type = "prob")
augment(log_fit, new_data = titanic_test) %>%
conf_mat(truth = survived, estimate = .pred_class)
augment(log_fit, new_data = titanic_test) %>%
roc_curve(survived, .pred_Yes) %>%
autoplot()
augment(log_fit, new_data = titanic_test) %>%
roc_auc(survived,.pred_Yes)
predict(log_fit, new_data = titanic_test, type = "prob")
augment(log_fit, new_data = titanic_test) %>%
conf_mat(truth = survived, estimate = .pred_class)
augment(log_fit, new_data = titanic_test) %>%
roc_curve(survived, .pred_Yes) %>%
autoplot()
augment(log_fit, new_data = titanic_test) %>%
roc_auc(survived,.pred_Yes)
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
rplot(cor_titanic)
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
plot(cor_titanic)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
titanic <- read.csv("titanic.csv")
head(titanic)
titanic$survived<-factor(titanic$survived, levels=c('Yes','No'))
titanic$pclass<-factor(titanic$pclass)
set.seed(1202)
titanic_split<-initial_split(titanic,prop=0.80,
strata = survived )
titanic_train<-training(titanic_split)
titanic_test<-testing(titanic_split)
titanic_train
titanic_test
ggplot(titanic_train,aes(x=survived))+geom_bar()
cor_titanic <- titanic_train %>%
select(is.numeric) %>%
correlate()
plot(cor_titanic)
titanic_recipe <- recipe(survived ~ pclass + sex + age + sib_sp +
parch + fare, data = titanic_train) %>%
step_impute_linear(age) %>%
step_dummy(all_nominal_predictors()) %>%
step_interact(terms= ~ starts_with("sex"):fare+
age:fare)
titanic_recipe
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(titanic_recipe)
log_fit <- fit(log_wkflow, titanic_train)
